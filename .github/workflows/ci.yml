# Name des GitHub Actions Workflows. Wird in der "Actions"-Ansicht auf GitHub angezeigt.
name: Godot CI - Export Project

# Trigger: Wann soll dieser Workflow ausgefÃ¼hrt werden?
on:
  # Bei jedem Push auf den 'main'-Branch
  push:
    branches: [ "main" ]
  # Bei jedem Pull Request, der auf den 'main'-Branch abzielt
  pull_request:
    branches: [ "main" ]

# Jobs: Eine Liste von Aufgaben, die ausgefÃ¼hrt werden sollen.
jobs:
  # Der einzige Job in diesem Workflow heiÃŸt "export".
  export:
    # Name des Jobs, der auf GitHub angezeigt wird.
    name: Export Game
    # Betriebssystem, auf dem der Job laufen soll. 'ubuntu-latest' ist Standard und kosteneffizient.
    runs-on: ubuntu-latest

    # Schritte: Die einzelnen Aktionen, die im Job ausgefÃ¼hrt werden.
    steps:
      # Schritt 1: Code aus dem Repository auschecken
      # LÃ¤dt den aktuellen Stand deines Codes herunter, damit der Workflow damit arbeiten kann.
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Notwendig, um Git-Metadaten fÃ¼r einige Godot-Export-Features zu haben (optional).
          fetch-depth: 0

      # Schritt 2: Godot Engine und Export-Templates einrichten
      # Nutzt eine vorgefertigte Action aus der Community, um Godot herunterzuladen und zu konfigurieren.
      # Du musst hier die Godot-Version an dein Projekt anpassen!
      - name: Set up Godot
        uses: abarichello/godot-ci@v1.2
        with:
          # WICHTIG: Ã„ndere dies auf die exakte Godot-Version, die du fÃ¼r dein Projekt verwendest.
          godot-version: '4.4.1'
          # Stellt sicher, dass auch die Export-Templates fÃ¼r diese Version heruntergeladen werden.
          download-templates: true

      # Schritt 3: Export-Verzeichnisse erstellen
      # Erstellt Ordner, in denen die exportierten Spieldateien abgelegt werden.
      - name: Create Export Directories
        run: mkdir -p ./build/linux ./build/windows ./build/web

      # Schritt 4: Projekt exportieren
      # FÃ¼hrt den eigentlichen Export-Befehl fÃ¼r jede Zielplattform aus.
      # WICHTIG: Die Namen der Presets ("Linux/X11", "Windows Desktop", "Web") mÃ¼ssen exakt
      # mit den Namen Ã¼bereinstimmen, die du in Godot im "Export"-Dialogfenster festgelegt hast!
      - name: Export Project
        run: |
          echo "ðŸš€ Starting export for Linux..."
          godot --headless --export-release "Linux/X11" --output ./build/linux/aethelgard.x86_64
          
          echo "ðŸš€ Starting export for Windows..."
          godot --headless --export-release "Windows Desktop" --output ./build/windows/aethelgard.exe
          
          echo "ðŸš€ Starting export for Web..."
          godot --headless --export-release "Web" --output ./build/web/index.html

      # Schritt 5: Exportierte Dateien als Artefakte hochladen
      # Speichert die fertigen Builds, damit du sie nach Abschluss des Workflows
      # von der GitHub-Actions-Seite herunterladen kannst.
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: game-builds
          path: ./build

